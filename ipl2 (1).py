# -*- coding: utf-8 -*-
"""IPL2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SJG_w7-HkVzFzCBpobl89To3kstMjJmP
"""

import pandas as pd
import numpy as np
import json
import requests
from bs4 import BeautifulSoup

ipl = pd.read_csv("/content/sample_data/Teams-Grid view.csv")

ipl.head()

# Define headers
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36'
}

# List of URLs to fetch data from
urls = [
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359475',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359476',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359477',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359478',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359479',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359480',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359481',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359482',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359483',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359484',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359485',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359486',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359487',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359488',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359489',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359490',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359491',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359492',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359493',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359494',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359495',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359496',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359497',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359498',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359499',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359500',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359501',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359502',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359503',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359504',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359505',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359506',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359507',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359508',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359509',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359510',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359511',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359512',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359513',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359514',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359515',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359516',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359517',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359518',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359519',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359520',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359521',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359522',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359523',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359524',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359525',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359526',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359527',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359528',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359529',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359530',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359531',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359532',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359533',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359534',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359535',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359536',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359537',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359538',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359539',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359540',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359541',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359542',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359543',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1359544',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1370350',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1370351',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1370352',
    'https://hs-consumer-api.espncricinfo.com/v1/pages/match/scorecard?lang=en&seriesId=1345038&matchId=1370353'
]

# List to hold player data
all_player_data = []
# List to hold score data
all_score_data = []
# List to hold bowler data
all_bowler_data = []

# Loop through each URL
for url in urls:
    response = requests.get(url, headers=headers)
    response.raise_for_status()  # Ensure we notice bad responses

    # Parse the JSON response
    data = json.loads(response.text)

    # Extract team and player details
    for team in data.get('content', {}).get('matchPlayers', {}).get('teamPlayers', []):
        for player in team.get('players', []):
            player_name = player['player']['name']
            player_details = {
                'Match ID': data.get('match', {}).get('objectId'),
                'Player ID': player['player']['id'],
                'Player Name': player_name,
                'Team Name': team['team']['longName']
            }
            all_player_data.append(player_details)

    # Extract score data
    for innings in data['content']['innings']:
        for batsman in innings.get('inningBatsmen', []):
            player_runs = batsman['runs']
            is_out = batsman['isOut']
            # Initialize dismissal details as None
            dismissal_bat = None
            dismissal_bowl = None
            dismissal_fielders = None
            dismissal_text = None

            # Check if the batsman is out and extract dismissal details
            if is_out:
                dismissal_bat = batsman['dismissalBatsman']['name']
                dismissal_bowl = batsman['dismissalBowler']['name']
                dismissal_fielders_data = batsman['dismissalFielders']
                if dismissal_fielders_data:
                    dismissal_fielders = ', '.join(
                        fielder['player']['name'] if fielder.get('player') and 'name' in fielder['player'] else 'None'
                        for fielder in dismissal_fielders_data
                    )
                dismissal_text = batsman['dismissalText']['short']

            # Convert lists to strings without square brackets
            def list_to_string(lst):
                return ', '.join(lst).replace(' ', ', ') if isinstance(lst, list) else lst

            score_details = {
                'Match ID': data.get('match', {}).get('objectId'),
                'Team Name': innings['team']['longName'],
                'Batter': batsman['player']['name'],
                'Runs': player_runs,
                'Balls': batsman['balls'],
                'Fours': batsman['fours'],
                'Sixes': batsman['sixes'],
                'Strikerate': batsman['strikerate'],
                'Isout': batsman['isOut'],
                'Playing_Role': list_to_string(lst=batsman['player']['playingRoles']),
                'Dismissal_Batter': dismissal_bat,
                'Dismissal_Bowler': dismissal_bowl,
                'Dismissal_Fielder': dismissal_fielders,
                'Player_Dismissal_Type': dismissal_text
            }
            all_score_data.append(score_details)

    # Extract bowler data
    for innings in data.get('content', {}).get('innings', []):
        for bowler in innings.get('inningBowlers', []):
            bowler_details = {
                'Match ID': data.get('match', {}).get('objectId'),
                'Team Name': innings['team']['longName'],
                'Bowler': bowler['player']['name'],
                'Overs': bowler['overs'],
                'Bowler Balls': bowler['balls'],
                'Maiden': bowler['maidens'],
                'Conceded_Runs': bowler['conceded'],
                'Wickets': bowler['wickets'],
                'Economy': bowler['economy'],
                'Runs Per Ball': bowler['runsPerBall'],
                'Dots': bowler['dots'],
                'Bowl 4s': bowler['fours'],
                'Bowl 6s': bowler['sixes'],
                'Wides': bowler['wides'],
                'No Balls': bowler['noballs']
            }
            all_bowler_data.append(bowler_details)

# Convert the list of player data to a DataFrame
df_players = pd.DataFrame(all_player_data)

# Convert the list of score data to a DataFrame
df_teams1 = pd.DataFrame(all_score_data)

# Convert the list of bowler data to a DataFrame
df_teams2 = pd.DataFrame(all_bowler_data)

print("Player data extracted and saved to ipl_2024_all_players.csv")

df_players

# Replace words in the 'Playing Role' column
rename_mapping = {
    'batting': 'batter',
    'bowling': 'bowler'
}

for index, row in df_teams1.iterrows():
    playing_roles = row['Playing_Role'].split(', ')
    for old_word, new_word in rename_mapping.items():
        playing_roles = [new_word if role == old_word else role for role in playing_roles]
    df_teams1.at[index, 'Playing_Role'] = ', '.join(playing_roles)

# Save to CSV or any other format
df_players.to_csv("ipl_2024_all_players.csv", index=False)
df_teams1.to_csv("ipl_2024_all_scores.csv", index=False)

print("Score data extracted and saved to ipl_2024_all_scores.csv")

df_teams1

# Function to extract "allrounder" from the playing_role column
def extract_role(role, target_role):
    if target_role in role:
        return target_role
    else:
        return None

# Apply the function to create a new column
df_teams1['allrounder'] = df_teams1['Playing_Role'].apply(lambda x: extract_role(x, 'allrounder'))
df_teams1['batter'] = df_teams1['Playing_Role'].apply(lambda x: extract_role(x, 'batter'))
df_teams1['wicketkeeper'] = df_teams1['Playing_Role'].apply(lambda x: extract_role(x, 'wicketkeeper'))

# Columns to drop
columns_to_drop = ['Playing_Role']

# Drop the columns
df_teams1 = df_teams1.drop(columns=columns_to_drop)

df_teams1

df_teams2

# Extract player names from team data
def extract_player_name(name):
    return name.split(' - ')[0] #From ipl dataset

# Apply extraction to create a mapping
player_columns = ['Batter 1', 'Batter 2', 'All Rounder 1', 'Wicket Keeper', 'Bowler 1', 'Bowler 2', 'Captain']

for col in player_columns:
    ipl[col] = ipl[col].apply(extract_player_name)

# Extract all player columns
player_columns = ['Batter 1', 'Batter 2', 'Batter 3', 'Batter 4', 'All Rounder 1', 'All Rounder 2', 'Wicket Keeper', 'Bowler 1', 'Bowler 2', 'Bowler 3', 'Bowler 4', 'Captain']

# Flatten the player lists into a single list
all_players = ipl[player_columns].values.flatten()

# Assign points to batsmen
def assign_batsman_points(row):
    points = 0
    runs = row['Runs']
    fours = row['Fours']
    sixes = row['Sixes']
    strikerate = row['Strikerate']

    if row['Batter'] in all_players:
        # Basic points
        points += runs + (fours * 1) + (sixes * 2)

        # Bonuses
        if runs >= 100:
            points += 16  # Century bonus (no other bonuses apply)
        elif runs >= 50:
            points += 8  # Half-century bonus (excludes 30 run bonus)
        elif runs >= 30:
            points += 4  # 30 run bonus

        # Penalty for dismissal for a duck
        if runs == 0 and row['Isout']:
            points -= 2  # Dismissal for a duck

        # Strike rate bonuses/penalties
        if row['Balls'] >= 10:
            if strikerate > 170:
                points += 6
            elif 150.01 <= strikerate <= 170:
                points += 4
            elif 130 <= strikerate <= 150:
                points += 2
            elif 60 <= strikerate < 70:
                points -= 2
            elif 50 <= strikerate < 60:
                points -= 4
            elif strikerate < 50:
                points -= 6

    return points

df_teams1['Batsman Points'] = df_teams1.apply(assign_batsman_points, axis=1)

# Assign points to bowlers
def assign_bowler_points(row):
    points = 0
    wickets = row['Wickets']
    overs = row['Overs']
    conceded_runs = row['Conceded_Runs']
    economy = row['Economy']

    if row['Bowler'] in all_players:
        # Basic points
        points += wickets * 25

        # Bonuses for multiple wickets
        if wickets >= 5:
            points += 16
        elif wickets == 4:
            points += 8
        elif wickets == 3:
            points += 4

        # Maiden over bonus
        points += row['Maiden'] * 12

        # Economy rate bonuses/penalties
        if overs >= 2:
            if economy < 5:
                points += 6
            elif 5 <= economy < 6:
                points += 4
            elif 6 <= economy < 7:
                points += 2
            elif 10 <= economy < 11:
                points -= 2
            elif 11 <= economy < 12:
                points -= 4
            elif economy >= 12:
                points -= 6

    return points

df_teams2['Bowler Points'] = df_teams2.apply(assign_bowler_points, axis=1)

# Function to calculate fielding points
def assign_fielding_points(row, team_players):
    fielding_points = 0
    if row['Dismissal_Fielder'] in team_players:
        if row['Player_Dismissal_Type'] == 'caught':
            fielding_points += 8
        elif row['Player_Dismissal_Type'] == 'stumping':
            fielding_points += 12
        elif row['Player_Dismissal_Type'] == 'run out (direct hit)':
            fielding_points += 12
        elif row['Player_Dismissal_Type'] == 'run out (not a direct hit)':
            fielding_points += 6
    return fielding_points

# Calculate total points for each team
team_points = {}

for team in ipl['Team Name'].unique():
    team_players = ipl[ipl['Team Name'] == team][player_columns].values.flatten()
    batsman_points = df_teams1[df_teams1['Batter'].isin(team_players)]['Batsman Points'].sum()
    bowler_points = df_teams2[df_teams2['Bowler'].isin(team_players)]['Bowler Points'].sum()
    # Assign fielding points
    fielding_points = df_teams1.apply(lambda row: assign_fielding_points(row, team_players), axis=1).sum()

    total_points = batsman_points + bowler_points + fielding_points
    team_points[team] = total_points

# Print team points
team_points

# Team with the highest points
winner_team = max(team_points, key=team_points.get)
winner_points = team_points[winner_team]

# Print the winner
print(f"The winner is {winner_team} with {winner_points} points.")

# Add team points to the IPL DataFrame
ipl['Team Points'] = ipl['Team Name'].map(team_points)

# Save the DataFrame to a CSV file
ipl.to_csv('IPL_Dream_Team_2023_Points.csv', index=False)

ipl